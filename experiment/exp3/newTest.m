function [X_k, x0, counter] = newTest(f_x, a, err)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%输入参数f_x为牛顿迭代函数，即满足f_x=x-f(x)/f'(x)的函数     %
%输入参数a为迭代初值                                        %
%输入参数err为误差精度                                      %
%输出参数X_k为迭代序列                                     %
%输出参数x0为满足精度要求的根                               %
%输出参数counter为迭代的次数                                %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    counter=0;%计数器初始化
    X_k=(0);%序列初始化
    if(f_x(a)==0)%如果a的函数值为0停止迭代输出x0为a的值，迭代次数为0
        x0=a;
        X_k(1)=a;
        counter=0;
        return;
    end
    
    if(f_x(a)~=0&&abs(f_x(a)-a)>=err)%a的函数不为零且不满足误差精度进行迭代
        X_k(counter+1)=a;%将a赋给序列第一个值
        a=f_x(a);%迭代
        counter=counter+1;%每迭代一次计数器加一
        X_k(counter+1)=a;%将当前值赋值给序列
        x0=a;%最终输出最后一个迭代值作为根
        newTest(a,err,f_x);%不满足精度时重复调用迭代函数本身进行迭代
    end
end